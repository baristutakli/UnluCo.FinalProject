@page "/products"
@using UnluCo.FinalProject.BlazorUI.ViewModels;
@using Newtonsoft.Json
@using System.Net.Http.Headers;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inherits ProductViewModel
@inject NavigationManager NavManager
@inject IJSRuntime JsRuntime

@inject ProtectedLocalStorage Storage



<h3>Products</h3>

@if (Products is null)
{
    <p>
        Loading...

    </p>
}
else
{
    <button @onclick="() => NavigateToCreateProductPage()" class="btn btn-primary">Create a product</button>

    <div class="container-fluid bg-trasparent my-4 p-3" style="position: relative;">

        @foreach (var product in Products)
        {
            <div class="row mx-auto" style=" display: inline-block;">
                <div class="col">
                    <div class="card h-100 shadow-sm" style=" display: inline-block;">
                        @if (product.UploadedFile is not null)
                        {
                            <img class="col mt-2" src="data:image;base64,@System.Convert.ToBase64String(product.UploadedFile.FileContent)" asp-append-version="true" style="height:160px;width:220px">
                        }
                        <div class="card-body">
                            <div class="clearfix mb-3"> <span class="float-start badge rounded-pill .bg-info text-dark">Available: @product.IsOfferable</span></div>
                            <h5 class="card-title">@product.Name</h5>
                            @if (@product.Description.Length > 120)
                            {
                                <p class="text-body text-justify" style="max-width:180px">@product.Description.Substring(0, 120)</p>
                            }
                            else
                            {
                                <p class="text-body text-justify" style="max-width:180px">@product.Description</p>
                            }

                            <ul class="list-group list-group-flush mb-2">
                                <li class="list-group-item">Price: @product.Price</li>
                                <li class="list-group-item">Color: @product.Color.Name</li>
                                <li class="list-group-item">Category: @product.Category.Title</li>
                                <li class="list-group-item">Brand: @product.Brand.Name</li>
                            </ul>
                            <button @onclick="() => NavigateToProductPage(product.Id)" class="btn btn-primary btn-sm">Detail</button>
                            <button @onclick="() => NavigateToCreateOfferPage(product.Id)" class="btn btn-warning btn-sm">Offer</button>

                        </div>
                    </div>
                </div>

            </div>
        }
    </div>

}

@code {

    public List<ProductViewModel> Products { get; set; }

    HttpClient client = new HttpClient();

    protected override async Task OnInitializedAsync()
    {

        var client = new HttpClient();
        var request = new HttpRequestMessage();
        //request.RequestUri = new Uri("http://localhost:19383/api/products");
        //request.Method = HttpMethod.Get;


        //request.Headers.Add("Accept", "*/*");

        //var token = await Storage.GetAsync<string>("token");
        //request.Headers.Authorization = new AuthenticationHeaderValue(token.Value.ToString());


        var products = await client.GetAsync("http://localhost:19383/api/products");
        Products = JsonConvert.DeserializeObject<List<ProductViewModel>>(await products.Content.ReadAsStringAsync()).ToList();


    }
    public void NavigateToProductPage(int id)
    {
        NavManager.NavigateTo($"/products/{id}");
    }
    public void NavigateToCreateProductPage()
    {
        NavManager.NavigateTo($"/products/create");
    }
    public void NavigateToCreateOfferPage(int id)
    {
        NavManager.NavigateTo($"/products/{id}/offer");
    }

    public string ShowImage(UploadedFile uploadedFile)
    {

        //Convert byte arry to base64string
        string imreBase64Data = Convert.ToBase64String(uploadedFile.FileContent);
        string imgDataURL = $"data:image/jpg;base64,{imreBase64Data}";
        return imgDataURL;
    }

}









