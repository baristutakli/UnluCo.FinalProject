@page "/categories"
@inherits CategoryModelView
@inject NavigationManager NavManager
@using Newtonsoft.Json
@inject IJSRuntime JsRuntime
<h3>Categories</h3>

@if (categories is null)
{
    <p>
        Loading...
    </p>
}
else
{
    <hr />

    <div class="col">
        @foreach (var item in categories)
        {
            <div class="row bg-light"><h5 class="m-auto">@item.Title</h5></div>

            @if (@item.Products.Count > 0)
            {
                <div class="row text-center">
                    <h4>Offers</h4>
                </div>

                <table class="table">
                    <thead>
                        <tr>
                            <th scope="col">Id</th>
                            <th scope="col">Name</th>
                            <th scope="col">Price</th>
                            <th scope="col">Category</th>
                            <th scope="col">Color</th>
                            <th scope="col">Brand</th>
                            <th scope="col">Options</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var product in @item.Products)
                        {
                            <tr>
                                <td>@product.Id</td>
                                <td>@product.Name</td>
                                <td>@product.Price</td>
                                <td>@product.Category.Title</td>
                                <td>@product.Color.Name</td>
                                <td>@product.Brand.Name</td>

                                <td>
                                    <button class="btn btn-primary btn-sm" @onclick="() => NavigateToProductPage(product.Id)">Detail</button>
                                    <button @onclick="()=>DeleteProduct(product.Id)" class="btn btn-danger btn-sm mr-1">Delete</button>
                                </td>
                            </tr>

                        }


                    </tbody>
                </table>
                <hr class="bg-dark"/>
            }



        }

    </div>
}
@code {


    public List<CategoryModelView> categories { get; set; }

    HttpClient client = new HttpClient();

    public DeleteProductViewModel deleteProductViewModel { get; set; }
    //public async void Callme()
    //{
    //    var category = await client.GetAsync("http://localhost:19383/api/Categories/");
    //    VM = JsonConvert.DeserializeObject<CategoryModelView>(await category.Content.ReadAsStringAsync());
    //}

    protected override async Task OnInitializedAsync()
    {
        var category = await client.GetAsync("http://localhost:19383/api/Categories");
        categories = JsonConvert.DeserializeObject<List<CategoryModelView>>(await category.Content.ReadAsStringAsync()).ToList();

    }

    public void NavigateToProductPage(int id)
    {
        NavManager.NavigateTo($"/products/{id}");
    }
    //System.Text.Encoding.UTF8.GetString(await category.Content.ReadAsByteArrayAsync())

    public async void DeleteProduct(int id)
    {
        deleteProductViewModel = new DeleteProductViewModel() { Id = id };
        var request = new HttpRequestMessage();
        request.RequestUri = new Uri($"http://localhost:19383/api/Products/{id}");
        request.Method = HttpMethod.Delete;

        request.Headers.Add("Accept", "*/*");


        var bodyString = System.Text.Json.JsonSerializer.Serialize(deleteProductViewModel);

        var content = new StringContent(bodyString, System.Text.Encoding.UTF8, "application/json");
        request.Content = content;

        var response = await client.SendAsync(request);
        var responseMessage = await response.Content.ReadAsStringAsync();
        Response result = JsonConvert.DeserializeObject<Response>(responseMessage);
        if (result.Status == "Success")
        {
            await JsRuntime.InvokeVoidAsync("alert", result.Message);

        }
        var category = await client.GetAsync("http://localhost:19383/api/Categories");
        categories = JsonConvert.DeserializeObject<List<CategoryModelView>>(await category.Content.ReadAsStringAsync()).ToList();
        StateHasChanged();
    }
}




